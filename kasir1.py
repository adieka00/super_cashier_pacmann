# -*- coding: utf-8 -*-
"""kasir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rl5yp4jNPNe51yOeqjOJ0Wq__Ljroo7q
"""

# class Transaction untuk menyimpan data transaksi
class Transaction:
    def __init__(self):
        # dictionary untuk menyimpan nama item, jumlah item, dan harga item
        self.items = {}
        # Membuat variabel untuk menyimpan total harga transaksi
        self.total = 0

    # method untuk menambahkan item ke transaksi
    def add_item(self, name, qty, price):
        # Jika nama item sudah ada di dictionary, maka tambahkan jumlah dan harga item
        if name in self.items:
            self.items[name][0] += qty
            self.items[name][1] += price * qty
        # Jika nama item belum ada di dictionary, maka buat entry baru dengan nama, jumlah, dan harga item
        else:
            self.items[name] = [qty, price * qty]
        # Tambahkan harga item ke total harga transaksi
        self.total += price * qty
        print("Item yang Anda beli adalah:")
        print("| No | Nama Item | Jumlah Item | Harga/Item | Total Harga")
        for index, (name, [qty, price]) in enumerate(self.items.items(), start=1):
            print(f"| {index} | {name} | {qty} | {price/qty} | {price}", end="\n")

    # method untuk mengupdate nama item di transaksi
    def update_item_name(self, old_name, new_name):
        # Jika nama item lama ada di dictionary, maka ubah nama item dengan nama baru
        if old_name in self.items:
            self.items[new_name] = self.items.pop(old_name)
        # Jika nama item lama tidak ada di dictionary, maka tampilkan pesan error
        else:
            print("Item tidak ditemukan")

    # method untuk mengupdate jumlah item di transaksi
    def update_item_qty(self, name, new_qty):
        # Jika nama item ada di dictionary, maka ubah jumlah item dengan jumlah baru
        if name in self.items:
            # Kurangi total harga transaksi dengan harga item lama
            self.total -= self.items[name][1]
            # Hitung harga item baru dengan mengalikan jumlah baru dengan harga per item
            new_price = new_qty * (self.items[name][1] / self.items[name][0])
            # Ubah jumlah dan harga item di dictionary dengan nilai baru
            self.items[name] = [new_qty, new_price]
            # Tambahkan total harga transaksi dengan harga item baru
            self.total += new_price
        # Jika nama item tidak ada di dictionary, maka tampilkan pesan error
        else:
            print("Item tidak ditemukan")

    # method untuk mengupdate harga item di transaksi
    def update_item_price(self, name, new_price):
        # Jika nama item ada di dictionary, maka ubah harga item dengan harga baru
        if name in self.items:
            # Kurangi total harga transaksi dengan harga item lama
            self.total -= self.items[name][1]
            # Hitung harga item baru dengan mengalikan jumlah item dengan harga baru
            new_price = new_price * self.items[name][0]
            # Ubah harga item di dictionary dengan nilai baru
            self.items[name][1] = new_price
            # Tambahkan total harga transaksi dengan harga item baru
            self.total += new_price
        # Jika nama item tidak ada di dictionary, maka tampilkan pesan error
        else:
            print("Item tidak ditemukan")

    # method untuk menghapus item dari transaksi
    def delete_item(self, name):
        # Jika nama item ada di dictionary, maka hapus item dari dictionary dan kurangi total harga transaksi dengan harga item tersebut
        if name in self.items:
            self.total -= self.items[name][1]
            del self.items[name]
        # Menampilkan daftar item yang tidak dihapus
            if len(self.items) > 0:
                print("| No | Nama Item | Jumlah Item | Harga/Item | Total Harga")
                for index, (name, [qty, price]) in enumerate(self.items.items(), start=1):
                    print(f"| {index} | {name} | {qty} | {price/qty} | {price}")
            else:
                print("Semua item berhasil dihapus.")
        # Jika nama item tidak ada di dictionary, maka tampilkan pesan error
        else:
            print("Item tidak ditemukan")

    # Memethod untuk menghapus semua transaksi atau reset
    def reset_transaction(self):
        self.items = {}
        self.total = 0
        print("semua item berhasil dihapus!")

    # method untuk memeriksa pesanan
    def check_order(self):
        if len(self.items) == 0:
            print("Tidak ada pesanan yang dibeli.")
        else:
            print("| No | Nama Item | Jumlah Item | Harga/Item | Total Harga")
            for index, (name, [qty, price]) in enumerate(self.items.items(), start=1):
                print(f"| {index} | {name} | {qty} | {price/qty} | {price}")

    # method untuk total belanja
    def total_price(self):
        total = self.total
        if total > 500000:
            discount = 0.1
        elif total > 300000:
            discount = 0.08
        elif total > 200000:
            discount = 0.05
        else:
            discount = 0

        discounted_price = total - (total * discount)
        print(f"Total belanja: {total}")
        print(f"Diskon: {discount * 100}%")
        print(f"Total belanja setelah diskon: {discounted_price}")

# Membuat objek dari class Transaction dengan ID trnsct123
trnsct123 = Transaction()

# Membuat objek dari class Transaction dengan ID trnsct123
trnsct123 = Transaction()

# Menambahkan beberapa item ke transaksi trnsct123 menggunakan method add_item()
trnsct123.add_item("tempe", 2, 3000)
trnsct123.add_item("mobil", 1, 100000)
trnsct123.add_item("susu", 3, 9000)

# Mengupdate nama item "tempe" menjadi "tahu" menggunakan method update_item_name()
trnsct123.update_item_name("tempe", "tahu")

# Mengupdate jumlah item "susu" menjadi 4 menggunakan method update_item_qty()
#trnsct123.update_item_qty("susu", 4)

# Mengupdate harga item "mobil" menjadi 120000 menggunakan method update_item_price()
#trnsct123.update_item_price("mobil", 120000)

# Menghapus item "mobil" dari transaksi transaksi menggunakan method delete_item()
#trnsct123.delete_item("mobil")

# Menghapus semua transaksi atau reset transaksi transaksi menggunakan method reset_transaction()
# trnset123.reset_transaction()

trnsct123.check_order()

trnsct123.delete_item('susu')



trnsct123.reset_transaction()

trnsct123.check_order()

